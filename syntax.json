{
    "print_string": {
        "type": "function",
        "pattern": "print\\(\"(.*)\"\\);",
        "replacement": "println!(\"{}\", \"\\1\");"
    },
    "print_number": {
        "type": "function",
        "pattern": "print\\((\\d+)\\);",
        "replacement": "println!(\"{}\", \\1);"
    },
    "var_string": {
        "type": "variable",
        "pattern": "let (\\w+) = \"(.*)\";",
        "replacement": "let mut \\1 = String::from(\"\\2\");"
    },
    "var_number": {
        "type": "variable",
        "pattern": "let (\\w+) = (\\d+);",
        "replacement": "let mut \\1 = \\2;"
    },
    "ref": {
        "type": "input",
        "pattern": "ref (\\w+) >> (\\w+);",
        "replacement": "std::io::stdin().read_line(&mut \\2).unwrap();"
    },
    "int": {
        "type": "function",
        "pattern": "^\\s*int\\s+(\\w+)\\s*\\(\\)\\s*\\{\\s*$",
        "replacement": "fn \\1() {"
    },
    "whee_marker": {
        "type": "meta",
        "pattern": "^=== WHEE ===$",
        "replacement": "// Whee"
    },
    "empty_line": {
        "type": "meta",
        "pattern": "^\\s*$",
        "replacement": ""
    },
    "closing_brace": {
        "type": "syntax",
        "pattern": "^\\}$",
        "replacement": "}"
    },
    "call": {
        "type": "call",
        "pattern": "^\\s*call\\s+(\\w+)\\s*;\\s*$",
        "replacement": "\\1();"
    },
    "rust_cmd": {
      "type": "meta",
      "pattern": "^\\s*-rust\\s+(.*)$",
      "replacement": "\\1"
    },
    "system": {
      "type": "function",
      "pattern": "^\\s*system\\(\"(.+)\"\\);\\s*$",
      "replacement": "Command::new(\"sh\").arg(\"-c\").arg(\"\\1\").status().expect(\"failed to execute command\");"
    },
    "shebang_comment": {
        "type": "preprocess",
        "pattern": "^#!(.*)$",
        "replacement": "// \\1"
    }
}
